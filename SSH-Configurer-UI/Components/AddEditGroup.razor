@using SSH_Configurer_UI.Model;
@using SSH_Configurer_UI.Components
@using SSH_Configurer_UI.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="@group" OnValidSubmit="@Save">
    <DataAnnotationsValidator />
    <div>Name:</div>
    <ValidationMessage For="(() => group.Name)" />
    <InputText class="form-control" placeholder="Name" @bind-Value="@group.Name"></InputText><br />
    <div>Default key pair ID:</div>
    <InputSelect class="form-control" TValue="int" @bind-Value="@group.KeyPairId">
        @if (keys.Count > 0)
        {
            <option value=-1></option>
            @foreach (var key in keys)
            {
                <option value=@key.Id>@key.Name</option>
            }
        }
        else
        {
            <option value=-1>No keys found!</option>
        }
    </InputSelect><br />
    <div>Assigned devices: </div><br />
    <div class="bg-blue-100">
        <input class="border-4 w-1/3 rounded m-6 p-6 h-8
               border-blue-300" @bind-value="searchText"
        @oninput="OnInputChange" placeholder="Search by name" />
    </div><br />
    <DeviceSelectList Devices="searchedDevices"></DeviceSelectList>
    <div style="color: @color">@feedback</div><br />
    <button onclick="@Reset" class="btn btn-primary" type="submit">Save group</button>
</EditForm>

@code {
    [Parameter]
    public Group group { get; set; }

    [Parameter]
    public List<KeyPair> keys { get; set; }

    [Parameter]
    public EventCallback saveDevice { get; set; }

    [Parameter]
    public EventCallback resetFeedback { get; set; }

    [Parameter]
    public List<DeviceSelect> searchedDevices { get; set; }

    [Parameter]
    public string color { get; set; }

    [Parameter]
    public string feedback { get; set; }

    [Parameter]
    public string searchText { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private async Task OnInputChange(ChangeEventArgs args)
    {
        searchText = (string)args.Value;
        await ValueChanged.InvokeAsync(searchText);
    }

    private void Save()
    {
        saveDevice.InvokeAsync();
    }

    private void Reset()
    {
        resetFeedback.InvokeAsync();
    }
}
