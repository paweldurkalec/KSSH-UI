@using SSH_Configurer_UI.Model;
@using SSH_Configurer_UI.Components
@using SSH_Configurer_UI.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="@device" OnValidSubmit="@Save">
    <DataAnnotationsValidator />

    <div>Name:</div>
    <ValidationMessage For="(() => device.Name)" />
    <InputText class="form-control" placeholder="Name" @bind-Value="@device.Name"></InputText><br />

    <div>Hostname:</div>
    <ValidationMessage For="(() => device.Hostname)" />
    <InputText class="form-control" placeholder="Hostname" @bind-Value="@device.Hostname"></InputText><br />

    <div>Port:</div>
    <ValidationMessage For="(() => device.Port)" />
    <InputNumber class="form-control" placeholder="Port" @bind-Value="@device.Port"></InputNumber><br />

    <div>Username:</div>
    <ValidationMessage For="(() => device.Username)" />
    <InputText class="form-control" placeholder="Username" @bind-Value="@device.Username"></InputText><br />

    <div>Key pair ID (optional):</div>
    <InputSelect class="form-control" TValue="int" @bind-Value="@device.KeyPairId">
        @if (keys.Count > 0)
        {
            <option value=-1></option>
            @foreach (var key in keys)
            {
                <option value=@key.Id>@key.Name</option>
            }
        }
        else
        {
            <option value=-1>No keys found!</option>
        }
    </InputSelect><br />

    <label for="isChecked">Include password:</label>
    <InputCheckbox id="isChecked" @bind-Value="setPassword" />

    <fieldset disabled="@(setPassword == false)">
        <InputText class="form-control" placeholder="@passwordPlaceholder" @bind-Value="@device.Password" type="password"></InputText>
        <br />
    </fieldset>

    <div style="color: @color">@feedback</div><br />
    <button onclick="@Reset" class="btn btn-primary" type="submit">Save device</button>
</EditForm>

@code {
    [Parameter]
    public Device device { get; set; }

    [Parameter]
    public List<KeyPair> keys { get; set; }

    [Parameter]
    public EventCallback saveDevice { get; set; }

    [Parameter]
    public EventCallback resetFeedback { get; set; }

    [Parameter]
    public string color { get; set; }

    [Parameter]
    public string feedback { get; set; }

    [Parameter]
    public string passwordPlaceholder { get; set; }

    private bool _value;

    [Parameter]
    public bool setPassword
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            setPasswordChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> setPasswordChanged { get; set; }

    private void Save()
    {
        saveDevice.InvokeAsync();
    }

    private void Reset()
    {
        resetFeedback.InvokeAsync();
    }
}
