@page "/run-script"
@using SSH_Configurer_UI.Model;
@using SSH_Configurer_UI.Components
@using SSH_Configurer_UI.Model.DTOs.Async;
@using SSH_Configurer_UI.Services
@inject IContentService<Group> groupService
@inject IContentService<Device> deviceService
@inject IContentService<Script> scriptService
@inject IAuthenticationService authService
@inject IConfiguration configuration
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.WebSockets
@using System.Text
@using Newtonsoft.Json

<InfoTopDiv content="@getTopInfo()"></InfoTopDiv>

@if(pageStatus == pageOK){
    <EditForm Model="@configurationProcess" OnValidSubmit="@CheckConnection">
        <DataAnnotationsValidator />

        <div>Group of devices:</div>
        <ValidationMessage For="(() => configurationProcess.GroupId)" />
        <InputSelect class="form-control" TValue="int" @bind-Value="@configurationProcess.GroupId" onchange="@HandleGroupSelection()">
            @if (allGroups.Count > 0)
            {
                <option value=-1></option>
                @foreach (var group in allGroups)
                {
                    <option value=@group.Id>@group.Name</option>
                }
            }
            else
            {
                <option value=-1>No groups found!</option>
            }
        </InputSelect><br />

        <div>Script to run:</div>
        <ValidationMessage For="(() => configurationProcess.ScriptId)" />
        <InputSelect class="form-control" TValue="int" @bind-Value="@configurationProcess.ScriptId">
            @if (allScripts.Count > 0)
            {
                <option value=-1></option>
                @foreach (var script in allScripts)
                {
                    <option value=@script.Id>@script.Name</option>
                }
            }
            else
            {
                <option value=-1>No scripts found!</option>
            }
        </InputSelect><br />



        <div style="color: @color">@feedback</div><br />
        <button class="btn btn-primary" type="submit">Check connection</button>
    </EditForm>
    <br />


    @if(configurationProcess.deviceStatuses.Count>0){
    <br />
    <br />
    <DeviceStatusList DeviceStatuses="@configurationProcess.deviceStatuses" ShowWindow="@ShowTextWindow"></DeviceStatusList>
    <br />
    <br />
    <div style="color: @runButtonFeedbackColor">@runButtonFeedback</div>
    <br />
    @if (isButtonDisabled)
    {
        <button @onclick="RunButton" class="btn btn-primary" disabled>Run script</button>
    }
    else
    {
        <button @onclick="RunButton" class="btn btn-primary">Run script</button>
    }

    <LongTextDetails @ref="textWindow"></LongTextDetails>
    }
}

@code {
    const string pageOK = "Run script on given group of devices";

    ConfigurationProcess configurationProcess;
    ClientWebSocket webSocket = new ClientWebSocket();
    List<Group> allGroups;
    List<Script> allScripts;
    string pageStatus = "Loading...";
    int prevGroupChoice = -1;
    string feedback = "";
    string color = "";

    string runButtonFeedback = "";
    string runButtonFeedbackColor = "";
    bool isButtonDisabled = false;

    private LongTextDetails textWindow;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        configurationProcess = new();
        configurationProcess.GroupId = -1;
        configurationProcess.ScriptId = -1;
        configurationProcess.request_uuid = "";
        allGroups = new();
        allScripts = new();
        textWindow = new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string token;

            token = await authService.GetJwtAsync();
            if(token == null)
            {
                pageStatus = "You are not logged in.";
                StateHasChanged();
                return;
            }

            try
            {
                await webSocket.ConnectAsync(new Uri($"{configuration["BACKEND_WS"]}/{token}/"), CancellationToken.None);
                _ = ReceiveLoop();
                allGroups = (await groupService.GetAll()).ToList();
                allScripts = (await scriptService.GetAll()).ToList();
            }
            catch (Exception e)
            {
                pageStatus = $"Error occurred when connecting to application backend.\n{e.Message}";
                StateHasChanged();
                return;
            }
            pageStatus = pageOK;
            StateHasChanged();
        }
    }

    private async Task RunButton()
    {
        if(configurationProcess.deviceStatuses.Count == 0)
        {
            runButtonFeedback = "No devices to configure.";
            runButtonFeedbackColor = "red";
        }
        else if (configurationProcess.AllValid() && configurationProcess.ScriptId != -1)
        {
            runButtonFeedback = "Process initialized, please wait...";
            runButtonFeedbackColor = "black";
            isButtonDisabled = true;

            foreach (var ds in configurationProcess.deviceStatuses)
            {
                ds.statusMessage = "During configuration";
            }

            await Run();
        }
        else if (configurationProcess.ScriptId == -1)
        {
            runButtonFeedback = "Choose script.";
            runButtonFeedbackColor = "red";
        }
        else{
            runButtonFeedback = "Not all connections are valid.";
            runButtonFeedbackColor = "red";
        }
    }

    private async Task Run()
    {
        var gs = (GroupService)groupService;

        string? uuid = await gs.RunScript(configurationProcess.GroupId, configurationProcess.ScriptId);
        if (uuid != null)
        {
            configurationProcess.request_uuid = uuid;
            configurationProcess.Running();

        }
    }

    async Task CheckConnection()
    {     
        await ResetState();

        var gs = (GroupService)groupService;
        string? uuid = await gs.CheckConnection(configurationProcess.GroupId);
        if(uuid != null)
        {
            configurationProcess.CheckingConnection();
            configurationProcess.request_uuid = uuid;
        }
    }

    async Task HandleGroupSelection()
    {
        if (configurationProcess.GroupId != prevGroupChoice && configurationProcess.GroupId != -1)
        {
            prevGroupChoice = configurationProcess.GroupId;
            Group group = await groupService.GetById(configurationProcess.GroupId);
            List<Device> groupDevices = (await deviceService.GetByIds(group.DeviceIds)).ToList();
            configurationProcess.SetDevices(groupDevices);
            StateHasChanged();
        }
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[100 * 1024]);
        while (true)
        {
            // Note that the received block might only be part of a larger message. If this applies in your scenario,
            // check the received.EndOfMessage and consider buffering the blocks until that property is true.
            // Or use a higher-level library such as SignalR.
            var received = await webSocket.ReceiveAsync(buffer, CancellationToken.None).ConfigureAwait(false);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);

            var asyncResponse = JsonConvert.DeserializeObject<AsyncResponse>(receivedAsText);

            if(asyncResponse.message.request_uuid == configurationProcess.request_uuid)
            {
                DeviceStatus deviceStatus = configurationProcess.deviceStatuses.Where(ds => ds.device.Id == asyncResponse.message.device).First();
                deviceStatus.statusMessage = asyncResponse.message.status;
                deviceStatus.standardOutput = asyncResponse.message.result_std;
                deviceStatus.standardError = asyncResponse.message.result_err;
                deviceStatus.warnings = asyncResponse.message.warnings;
                if (configurationProcess.status == ConfigurationStatuses.RUNNING)
                {
                    deviceStatus.status = ConfigurationStatuses.FINISHED;
                    if (configurationProcess.AllFinished())
                    {
                        configurationProcess.status = ConfigurationStatuses.FINISHED;
                        isButtonDisabled = false;
                        if (configurationProcess.AllValid())
                        {
                            runButtonFeedback = "Process finished successfully.";
                            runButtonFeedbackColor = "green";
                        }
                        else if (configurationProcess.AllUnvalid()){
                            runButtonFeedback = "Process finished unsuccessfully.";
                            runButtonFeedbackColor = "red";
                        }
                        else
                        {
                            runButtonFeedback = "Process finished partially successfully.";
                            runButtonFeedbackColor = "orange";
                        }
                    }
                }
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }
    }

    private void ShowTextWindow(LongTextDetails inputWindow)
    {
        this.textWindow.BodyContent = inputWindow.BodyContent;
        this.textWindow.HeaderContent = inputWindow.HeaderContent;
        this.textWindow.Show();
    }

    async Task ResetState()
    {
        feedback = "";
        color = "";
        runButtonFeedback = "";
        runButtonFeedbackColor = "";
        isButtonDisabled = false;
    }

    private string getTopInfo()
    {
        return pageStatus;
    }
}
