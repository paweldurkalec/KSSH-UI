@page "/add-group"
@using SSH_Configurer_UI.Model;
@using SSH_Configurer_UI.Components
@using SSH_Configurer_UI.Services
@using Syncfusion.Blazor.Grids
@inject GroupService groupService
@inject PublicKeyService keyService
@inject DeviceService deviceService
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms


<EditForm Model="@group" OnValidSubmit="@SaveGroup">
    <DataAnnotationsValidator />
    <div>Name:</div>
    <ValidationMessage For="(() => group.Name)" />
    <InputText class="form-control" placeholder="Name" @bind-Value="@group.Name"></InputText><br />
    <div>Server Public Key:</div>
    <InputSelect class="form-control" TValue="int" @bind-Value="@group.ServerPubKeyId">
        @if (keys.Count > 0)
        {
            @foreach (var key in keys)
            {
                <option value=@key.Id>@key.Name</option>
            }
        }
        else
        {
            <option value=-1>No keys found!</option>
        }
    </InputSelect><br />
    <div>Assigned devices:</div><br />
    <div class="bg-blue-100">
        <input class="border-4 w-1/3 rounded m-6 p-6 h-8
               border-blue-300" @bind-value="searchText"
        @bind-value:event="oninput" placeholder="Search by title" />
    </div><br />
    <DeviceSelectList Devices="selectedDevices"></DeviceSelectList>
    <div style="color: @color">@feedback</div><br />
    <button onclick="@ResetFeedback" class="btn btn-primary" type="submit">Save group</button>
</EditForm>

@code {
    private Group group;
    List<PublicKey> keys;
    List<DeviceSelect> devices;
    string searchText = "";
    string deviceIdsString = "";
    string feedback = "";
    string color = "";
    List<DeviceSelect> selectedDevices => devices.Where(device => device.Name.ToLower().Contains(searchText.ToLower())).ToList();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        group = new Group();
        keys = keyService.GetAllKeys();
        devices = deviceService.GetAllDevices().Select(device => new DeviceSelect(device.Id, device.Name, device.Hostname, isSelected: false)).ToList();
    }

    private void SaveGroup()
    {
        List<int> deviceIds = selectedDevices.Select(device => device.Id).ToList();

        int response = groupService.AddGroup(new Group
            {
                Name = group.Name,
                ServerPubKeyId = group.ServerPubKeyId,
                DeviceIds = deviceIds
            });

        if (response == 0)
        {
            group = new Group();
            devices.ForEach(device => device.IsSelected = false);
            feedback = "Group added successfully.";
            color = "green";
        }
        else
        {
            feedback = "Adding failed.";
            color = "red";
        }
    }

    private void ResetFeedback()
    {
        feedback = "";
        color = "";
    }
}