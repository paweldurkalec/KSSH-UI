@page "/update-keyPair/{keyPairId}"
@using SSH_Configurer_UI.Model;
@using SSH_Configurer_UI.Components
@using SSH_Configurer_UI.Services
@inject KeyPairService keyPairService
@inject KeyPairService keyService
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@if (keyPair is null)
{
    <div style="color: @stateColor">@stateMessage</div>
}
else
{
    <AddEditKeyPair keyPair="@keyPair" resetFeedback="@ResetFeedback" saveKeyPair="@SaveKeyPair" color="@color" feedback="@feedback"></AddEditKeyPair>
}

@code {
    [Parameter]
    public string keyPairId { get; set; }
    private KeyPair? keyPair = null;
    string feedback = "";
    string color = "";
    string stateMessage = "Loading...";
    string stateColor = "green";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        keyPair = keyPairService.GetById(int.Parse(keyPairId));
        if (keyPair is null)
        {
            stateMessage = "KeyPair not found!";
            stateColor = "red";
        }
    }

    private void SaveKeyPair()
    {
        int response = keyPairService.UpdateKeyPair(int.Parse(keyPairId), new KeyPair
            {
                Id = keyPair.Id,
                Name = keyPair.Name,
                PublicKey = keyPair.PublicKey,
                PrivateKey = keyPair.PrivateKey
            });
        if (response == 0)
        {
            keyPair = keyPairService.GetById(int.Parse(keyPairId));
            feedback = "KeyPair updated successfully.";
            color = "green";
        }
        else
        {
            feedback = "Updating failed.";
            color = "red";
        }
    }

    private void ResetFeedback()
    {
        feedback = "";
        color = "";
    }
}