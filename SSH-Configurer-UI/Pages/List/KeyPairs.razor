@page "/keyPairs"
@inject IContentService<KeyPair> keyPairService
@inject NavigationManager navManager;

<KeyPairList KeyPairs="keyPairs" DeleteCurrentKeyPair="RequestDeletion" UpdateCurrentKeyPair="UpdateKeyPair"></KeyPairList>

<Confirmation @ref="deleteConfirmation" OnConfirmed="@DeleteKeyPair"></Confirmation>

@code {
    private List<KeyPair> keyPairs = new();
    private Confirmation deleteConfirmation;

    // protected override async Task OnInitializedAsync()
    // {
    //     keyPairs = keyPairService.GetAll().Result.ToList();

    //     await base.OnInitializedAsync();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            keyPairs = (await keyPairService.GetAll()).ToList();
            StateHasChanged();
        }
    }

    private async Task RequestDeletion(KeyPair keyPair)
    {
        deleteConfirmation.HeaderContent = $"Deleting pair of keys";
        deleteConfirmation.BodyContent = $"Are you sure you want to delete pair of keys named {keyPair.Name} with id {keyPair.Id}?\n" +
                                          "This action can not be undone.";
        deleteConfirmation.actionItem = keyPair;
        deleteConfirmation.Show();
    }

    private async Task DeleteKeyPair(Object o)
    {
        KeyPair keyPair = (KeyPair)o;
        int result = await keyPairService.Remove(keyPair);
        if (result == 0)
        {
            keyPairs = (await keyPairService.GetAll()).ToList();
        }
    }

    private void UpdateKeyPair(int id)
    {
        navManager.NavigateTo($"./update-keyPair/{id}");
    }
}
