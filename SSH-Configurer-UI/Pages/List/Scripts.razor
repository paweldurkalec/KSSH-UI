@page "/scripts"
@inject IContentService<Script> scriptService
@inject NavigationManager navManager;

<ScriptList Scripts="scripts" ShowScriptContent="ShowContent" DeleteCurrentScript="RequestDeletion" UpdateCurrentScript="UpdateScript"></ScriptList>

<LongTextDetails @ref="scriptContent"></LongTextDetails>

<Confirmation @ref="deleteConfirmation" OnConfirmed="@DeleteScript"></Confirmation>

@code {
    private List<Script> scripts = new();
    private Confirmation deleteConfirmation;
    private LongTextDetails scriptContent;

    // protected override async Task OnInitializedAsync()
    // {
    //     scripts = scriptService.GetAll().Result.ToList();

    //     await base.OnInitializedAsync();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            scripts = (await scriptService.GetAll()).ToList();
            StateHasChanged();
        }
    }

    private async Task RequestDeletion(Script script)
    {
        deleteConfirmation.HeaderContent = $"Deleting script";
        deleteConfirmation.BodyContent = $"Are you sure you want to delete script named {script.Name} with id {script.Id}?\n" +
                                          "This action can not be undone.";
        deleteConfirmation.actionItem = script;
        deleteConfirmation.Show();
    }

    private void ShowContent(Script script)
    {
        scriptContent.HeaderContent = script.Name;
        scriptContent.BodyContent = script.Content;
        scriptContent.Show();
    }

    private async Task DeleteScript(Object o)
    {
        Script script = (Script)o;
        int result = await scriptService.Remove(script);
        if (result == 0)
        {
            scripts = (await scriptService.GetAll()).ToList();
        }
    }

    private void UpdateScript(int id)
    {
        navManager.NavigateTo($"./update-script/{id}");
    }
}
