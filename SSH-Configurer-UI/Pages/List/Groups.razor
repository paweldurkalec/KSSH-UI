@page "/groups"
@inject IContentService<Group> groupService
@inject NavigationManager navManager;

<GroupList Groups="groups" DeleteCurrentGroup="RequestDeletion" UpdateCurrentGroup="UpdateGroup"></GroupList>

<Confirmation @ref="deleteConfirmation" OnConfirmed="@DeleteGroup"></Confirmation>

@code {
    private List<Group> groups = new();
    private Confirmation deleteConfirmation;

    // protected override async Task OnInitializedAsync()
    // {
    //     groups = groupService.GetAll().Result.ToList();

    //     await base.OnInitializedAsync();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            groups = (await groupService.GetAll()).ToList();
            StateHasChanged();
        }
    }

    private async Task RequestDeletion(Group group)
    {
        deleteConfirmation.HeaderContent = $"Deleting group";
        deleteConfirmation.BodyContent = $"Are you sure you want to delete group named {group.Name} with id {group.Id}?\n" +
                                          "Devices connected to this group will not be deleted.\n" +
                                          "This action can not be undone.";
        deleteConfirmation.actionItem = group;
        deleteConfirmation.Show();
    }

    private async Task DeleteGroup(Object o)
    {
        Group group = (Group)o;
        int result = await groupService.Remove(group);
        if (result == 0)
        {
            groups = (await groupService.GetAll()).ToList();
        }
    }

    private void UpdateGroup(int id)
    {
        navManager.NavigateTo($"./update-group/{id}");
    }
}
