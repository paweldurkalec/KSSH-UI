@page "/devices"
@inject NavigationManager navManager;
@inject IContentService<Device> deviceService;

<DeviceList Devices="devices" DeleteCurrentDevice="RequestDeletion" UpdateCurrentDevice="UpdateDevice"></DeviceList>

<Confirmation @ref="deleteConfirmation" OnConfirmed="@DeleteDevice"></Confirmation>

@code {
    private List<Device> devices = new();
    private Confirmation deleteConfirmation;

    // protected override async Task OnInitializedAsync()
    // {
    //     devices = (await deviceService.GetAll()).ToList();

    //     await base.OnInitializedAsync();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            devices = (await deviceService.GetAll()).ToList();
            StateHasChanged();
        }
    }

    private async Task RequestDeletion(Device device)
    {
        deleteConfirmation.HeaderContent = $"Deleting device";
        deleteConfirmation.BodyContent = $"Are you sure you want to delete device named {device.Name} with id {device.Id}?\n" +
                                          "This action can not be undone.";
        deleteConfirmation.actionItem = device;
        deleteConfirmation.Show();
    }

    private async Task DeleteDevice(Object o)
    {
        Device device = (Device)o;
        int result = await deviceService.Remove(device);
        if(result==0){
            devices = (await (deviceService.GetAll())).ToList();
        }    
    }

    private void UpdateDevice(int id)
    {
        navManager.NavigateTo($"./update-device/{id}");
    }
}
