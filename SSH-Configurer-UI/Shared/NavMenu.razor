@using SSH_Configurer_UI.Model;
@inject IStateService stateService;
@inject IAuthenticationService authService;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">SSH Configurer</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @foreach (var item in navItemsToDisplay)
        {
            <NavItemView menuItem=item></NavItemView>
        }
    </nav>
</div>

@code {
    static List<NavMenuItem> navItemsNotLoggedIn = new List<NavMenuItem>()
    {
        new NavMenuItem("Authentication", "authentication", 0, "oi oi-person", "oi oi-person", new List<NavMenuItem>())
    };

    static List<NavMenuItem> navItemsLoggedIn = new List<NavMenuItem>()
        {
            new NavMenuItem("Run script", "run-script", 0, "oi oi-target", "oi oi-target", new List<NavMenuItem>()),
            new NavMenuItem("Authentication", "authentication", 0, "oi oi-person", "oi oi-person", new List<NavMenuItem>()),
            new NavMenuItem("Groups", "none", 0, "oi oi-caret-bottom", "oi oi-caret-right",
                        new List<NavMenuItem>()
                        {
                            new NavMenuItem("Show groups", "groups", 1, "oi oi-grid-four-up", "oi oi-grid-four-up", new List<NavMenuItem>()),
                            new NavMenuItem("Add group", "add-group", 1, "oi oi-plus", "oi oi-plus", new List<NavMenuItem>())
                        }
            ),
            new NavMenuItem("Devices", "none", 0, "oi oi-caret-bottom", "oi oi-caret-right",
                        new List<NavMenuItem>()
                        {
                            new NavMenuItem("Show devices", "devices", 1, "oi oi-monitor", "oi oi-monitor", new List<NavMenuItem>()),
                            new NavMenuItem("Add device", "add-device", 1, "oi oi-plus", "oi oi-plus", new List<NavMenuItem>())
                        }
            ),
            new NavMenuItem("Scripts", "none", 0, "oi oi-caret-bottom", "oi oi-caret-right",
                        new List<NavMenuItem>()
                        {
                            new NavMenuItem("Show scripts", "scripts", 1, "oi oi-script", "oi oi-script", new List<NavMenuItem>()),
                            new NavMenuItem("Add script", "add-script", 1, "oi oi-plus", "oi oi-plus", new List<NavMenuItem>())
                        }
            ),
            new NavMenuItem("Keys", "none", 0, "oi oi-caret-bottom", "oi oi-caret-right",
                        new List<NavMenuItem>()
                        {
                            new NavMenuItem("Show keys", "keyPairs", 1, "oi oi-key", "oi oi-key", new List<NavMenuItem>()),
                            new NavMenuItem("Add key pair", "add-keyPair", 1, "oi oi-plus", "oi oi-plus", new List<NavMenuItem>())
                        }
            )
        };

    List<NavMenuItem> navItemsToDisplay = navItemsNotLoggedIn;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    public void ShowMenu()
    {
        navItemsToDisplay = navItemsLoggedIn;
    }

    private async Task<bool> CheckLogin()
    {
        string jwt = await authService.GetJwtAsync();

        return jwt != null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool loggedIn = await CheckLogin();

            if (loggedIn)
            {
                navItemsToDisplay = navItemsLoggedIn;
                StateHasChanged();
            }

            ((StateService)stateService).OnLogin += OnLogIn;
        }
    }

    public async void OnLogIn()
    {
        if (navItemsToDisplay == navItemsNotLoggedIn)
        {
            navItemsToDisplay = navItemsLoggedIn;
        }
        else
        {
            navItemsToDisplay = navItemsNotLoggedIn;
        }
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
